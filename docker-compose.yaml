version: '3.9'

services:
  app:
    build: app/.
    image: ${APP_IMAGE}
    container_name: app
    env_file:
      - .env
    volumes:
      - ${APP_SOURCE_PATH}:/usr/src/app
    expose:
      - "8000"
    command: >
      sh -c "until nc -z database 5432 ; do sleep 1; done && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  web-proxy:
    image: nginx:1.27.4-alpine
    container_name: web-proxy
    depends_on:
      - app
    ports:
      - "${WEB_PROXY_PORT_80}:80"
      - "${WEB_PROXY_PORT_443}:443"
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx:ro
      - ${NGINX_CERT_PATH}:/etc/nginx/certs:ro
    environment:
      - NGINX_HOST=localhost
    env_file:
      - .env

  rabbitmq:
    image: rabbitmq:4.0-alpine
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT_MANAGEMENT}:15672"
      - "${RABBITMQ_PORT_QUEUE}:5672"
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    restart: on-failure
    env_file:
      - .env

  database:
    image: postgres:17.2-alpine3.21
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 8G
    env_file:
      - .env

volumes:
  postgres_data:
  rabbitmq_volume:
